\documentclass[a4paper]{report}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{RJournal}
\usepackage{amsmath,amssymb,array}
\usepackage{booktabs}

%% load any required packages

% bold/italic text
\newcommand{\Bigtxt}[1]{\textbf{\textit{#1}}}

\begin{document}

%% do not edit, for illustration only
\sectionhead{Contributed research article}
\volume{XX}
\volnumber{YY}
\year{20ZZ}
\month{AAAA}

\begin{article}

%knitr options
<<setup, cache = F, echo = F>>=
library(knitr)
# set global chunk options
opts_chunk$set(fig.align = 'center', message = F, dev = 'pdf', dev.args = list(family = 'serif'), fig.pos = '!h', warning = F, background = 'white', highlight = FALSE, prompt = TRUE, size = 'small', out.width = '0.8\\textwidth')
options(replace.assign=TRUE,width=70,digits=1)
knit_hooks$set(document = function(x) {sub('\\usepackage[]{color}', '\\usepackage{xcolor}', x, fixed = TRUE)})
@

\title{\pkg{SWMPr}: An R Package for Retrieving, Organizing, and Analyzing Environmental Data for Estuaries}
\author{by Marcus W Beck}

\maketitle

\abstract{
The System-Wide Monitoring Program (SWMP) was implemented in 1995 by the US National Estuarine Research Reserve System. This program has provided two decades of continuous monitoring data at over 140 fixed stations in 28 estuaries. Simple tools for processing and evaluating the increasing quantity of data provided by the monitoring network have prevented broad-scale comparisons between systems and, in some cases, simple trend analysis of water quality parameters at individual sites.  This article describes the \CRANpkg{SWMPr} package that provides several functions to facilitate data retrieval, organization, and analysis of time series data in the reserve estuaries.  Previously unavailable functions for estuaries are also provided to estimate rates of ecosystem metabolism using the open-water method.  The \CRANpkg{SWMPr} package has facilitated a cross-reserve comparison of water quality trends and provides an effective approach to link quantitative information with analysis tools that will inform coastal protection and restoration.
}

\section{Introduction}

The development of low-cost, automated sensors that collect data in near real-time has enabled a proliferation of standardized environmental monitoring programs \citep{Glasgow04,Fries08}.  These programs provide access to invaluable sources of data that can be used to address a variety of research and management objectives.  Applications from automated remote sensors are numerous for aquatic environments with notable examples including prediction of harmful algal blooms and toxicants in freshwater systems \citep{Reed10}, development of a hydrometeorological monitoring network to support flash flood warning programs \citep{HADS15}, and a national marine buoy network covering large portions of the open ocean and coastal zones of the United States \citep{NDBC15}.  Automated remote monitoring programs offer several advantages over traditional site-specific, field-based methods including streamlining of data acquisition, minimizing human error, and reducing the overall cost of the collection process \citep{Glasgow04}.  However, the increasing quantity of available information to address relevant questions has contributed to the growth of `big data' where analyses are limited by compututational requirements and identifying the signal from the noise rather than the availability of information. A greater focus on synthesis, exploratory-based analytical techniques, and interpretation have characterized the use of data from automated monitoring programs \citep{Campbell13,Millie13}.

An invaluable source of monitoring data for coastal environments in the United States is provided by the National Estuarine Research Reserve System (NERRS, \url{http://www.nerrs.noaa.gov/}).  This network represents 28 estuarine reserves from different biogeographic regions that were chosen to address multiple goals for long-term research, monitoring, education, and stewardship in support of coastal management.  As part of this effort, the System-Wide Monitoring Program (SWMP) was implemented in 1995 at over 140 stations across the reserves to provide a robust, long-term monitoring system for water quality, weather, and land-use/habitat change.  The SWMP network has provided a continuous source of data collected at near real-time with the intent to evaluate natural and anthropogenic causes of spatiotemporal variation in environmental condition and ecosystem function.  These data have been applied both for evaluations of relevant characteristics at individual reserves (eg., \citet{Bulthius95,Dix08}) and differences between reserves (e.g., ecosystem metabolism \citet{Caffrey03,Caffrey04}, tidal characteristics \citet{Sanger02}, dissolved oxygen \citet{Wenner04}).  However, no cross-reserve comparisons have been conducted within the last decade despite the online availability of current SWMP data.  NERRS researchers and staff have also expressed a need for quantitative analysis tools to evaluate trends in water quality time series given the quantity and quality of data provided by SWMP \citep{SWMP14}.          

This article describes a software package that was developed to address research needs of the NERRS program using the open-source statistical programming language R.  \CRANpkg{SWMPr} (pronounced `swamper') is an R package that contains functions for retrieving, organizing, and analyzing estuary monitoring data from the System-Wide monitoring program.  Functions provided by \pkg{SWMPr} address many of the common issues working with large datasets created from automated sensor networks, such as data pre-processing to remove unwanted information, combining data from different sources, and exploratory analyses to identify key parameters of interest.  Additionally, a cross-reserve comparison of water quality trends and current ecosystem metabolism estimates is provided to illustrate potential applications using the functions in this package.  The software is provided specifically for use with NERRS data, although many of the applications are relevant for addressing common challenges working with large datasets.

\section{SWMP overview and data retrieval}

Four core data elements are collected through the SWMP monitoring network: abiotic monitoring data, biotic observations, habitat and land use mapping, and sentinel monitoring.  Only the abiotic data are monitored continuously with automated sensor networks, whereas the remaining elements involve field surveys or mapping products that differ between reserves given site-specific requirements.  As such, the \pkg{SWMPr} package is developed for the continuous abiotic monitoring network that represents a majority of the SWMP data and, consequently, the most challenging to evaluate.  Abiotic elements monitored at each reserve include water quality (water temperature, specific conductivity, salinity, dissolved oxygen concentration, dissolved oxygen saturation, depth, pH, turbidity, chlorophyll fluorescence), weather (air temperature, relative humidity, barometric pressure, wind speed, wind direction, photosynthetically active radiation, precipitation), and nutrient data (orthophosphate, ammonium, nitrite, nitrate, nitrite + nitrate, chlorophyll a).  Each reserve has no less than four water quality stations and one weather station at fixed locations.  Water quality and weather data are collected at 15 minute intervals, whereas nutrient data are collected monthly at each water quality station.  All data are made accessible through the Centralized Data Management Office (CDMO) web portal (\url{http://cdmo.baruch.sc.edu/}), where multiple quality assurance/quality control (QAQC) measures are used to screen the information for accuracy and reliability.  The final data include all timestamped observations including relevant QAQC flags with the appropriate qualifier.

The CDMO web portal was established to support priority areas of SWMP that focus on the continuation and advancement of data management.  As such, CDMO provides access to over 58 million water quality, weather, and nutrient records that have been authenticated through systematic QAQC procedures.    Prior to any data request to the CDMO, the location, parameter type, and date ranges need to be identified based on the analysis needs. All stations in the SWMP network are identified by a 7 or 8 character name that specifies the reserve, station, and parameter type.  For example, `apaebwq' is the water quality identifier (`wq') for the East Bay station (`eb') at the Apalachicola reserve (`apa').  Similarly, a suffix of `met' or `nut' would specify the weather (meteorological) or nutrients station.  All reserve names, stations, and date ranges for each parameter type can be viewed on the CDMO website. Alternatively, the \code{site\_codes} (all sites) or \code{site\_codes\_ind} (single site) functions provided by the \pkg{SWMPr} package can be used to view the same information.  As noted below, the computer's IP address must be registered with CDMO before using the data retrieval functions in \pkg{SWMPr}.  Web services are provided by CDMO for direct access to SWMP data through http requests, in addition to standard graphical user interface options for selecting data.  The data retrieval functions in \pkg{SWMPr} are simple calls to the existing retrieval functions on CDMO web services.  For example, the \code{site\_codes} function in \pkg{SWMPr} uses the \code{exportStationCodesXMLNew} function from the web services to retrieve metadata for all the SWMP sites.  The text below describes the data retrieval functions in more detail, including all other functions available in \pkg{SWMPr}.

\section{Structure of the \pkg{SWMPr} package}

\subsection{Installing the package}

The \pkg{SWMPr} package was developed for use with the R ($\geq$ v3.0.0) statistical programming language. The \pkg{SWMPr} package can be downloaded from CRAN by executing the following commands at the R console prompt.  The package is loaded in the workspace using the \code{library} command.

<<eval = F, message = F>>=
install.packages('SWMPr')
library(SWMPr)
@
<<eval = T, echo = F, message = F, cache = F>>=
devtools::load_all('M:/docs/SWMPr')
@

The \pkg{SWMPr} package was developed by considering a common data workflow that categorizes the functions as one of three steps based on their intended use: \Bigtxt{retrieving}, \Bigtxt{organizing}, and \Bigtxt{analyzing}.  Functions for retrieving are used to import the data into R as a \code{"swmpr"} object class.  Functions for organizing and analyzing the data provide methods for working with a \code{"swmpr"} object.  An additional group of `miscellaneous' functions are included as helpers for the main functions.  The following describes the package structure, beginning with the retrieval functions, a description of the \code{"swmpr"} object returned after retrieval, and, finally, the organizing and analyzing functions.

\subsection{Data retrieval}

Two basic approaches using \pkg{SWMPr} are available to import SWMP data into R, either through direct download or by importing local data (Table~\ref{tab:retrieve}). First, functions from the package can be used to import the data directly from the online server using CDMO web services. To do so, the IP address for the computer making the request must be registered by following instructions on the CDMO website.  The \code{site\_codes} or \code{site\_codes\_ind} functions can be used to view the available metadata after a computer is registered with CDMO. 

% table for retrieval functions
<<results = 'asis', echo = FALSE>>=
funcs <- c('all\\_params', 'all\\_params\\_dtrng', 'import\\_local', 'single\\_param', 'site\\_codes', 'site\\_codes\\_ind')
funcs <- paste0('\\code{', funcs, '}')

descrips <- c(
  'Retrieve records starting with the most recent at a given station, all parameters.  Wrapper to \\code{exportAllParamsXMLNew} function on web services.',
  'Retrieve records of all parameters within a given date range for a station.  Optional argument for a single parameter. Wrapper to \\code{exportAllParamsDateRangeXMLNew}.', 
  'Import files from a local path.  The files must be in a specific format, such as those returned from the CDMO using the zip downloads option.',
  'Retrieve records for a single parameter starting with the most recent at a given station.  Wrapper to \\code{exportSingleParamXMLNew} function on web services.', 
  'Metadata for all stations, wrapper to \\code{exportStationCodesXMLNew} function on web services.',
  'Metadata for all stations at a single site, wrapper  to \\code{NERRFilterStationCodesXMLNew} function on web services.'
  )

to_tab <- data.frame(Functions = funcs, Description = descrips, stringsAsFactors = F)

library(Hmisc)

latex(
  to_tab[, 'Description', drop = F],
  file = '',
  caption = "Retrieval functions available from the \\pkg{SWMPr} package. Full documentation for each function is in the help file (e.g., execute \\code{?all\\_params} for individual functions or \\code{help.search(`retrieve', package = `SWMPr')} for all).",
  rowlabel = 'Function',
  colheads = 'Description',
  rowname = to_tab$Functions,
  caption.loc = 'top',
  col.just=c("p{3.5in}"), 
  label = 'tab:retrieve', 
  table.env = FALSE, 
  where = '!tbp'
  )
@

<<eval = F>>=
# retrieve metadata for all sites
site_codes()

# retrieve metadata for a single site
site_codes_ind('apa')
@

Data retrieval functions to import data directly into R from the CDMO include \code{all\_params}, \code{all\_params\_dtrng}, and \code{single\_param}: \code{all\_params} returns the most recent records of all parameters at a station, \code{all\_params\_dtrng} returns all records within a date range for all parameters or a single parameter, and \code{single\_param} is identical to \code{all\_params} except that a single parameter is requested. Due to rate limitations on the CDMO server, the retrieval functions return a limited number of records with each request.  However, the \pkg{SWMPr} functions use the native CDMO web services iteratively (i.e., within a loop) to obtain all requested records.  Download time can be excessive for longer time series.     

<<eval = F>>=
# all parameters for a station, most recent
all_params('hudscwq')

# get all parameters within a date range
all_params_dtrng('hudscwq', c('09/10/2012', '02/8/2013'))

# get single parameter within a date range
all_params_dtrng('hudscwq', c('09/10/2012', '02/8/2013'), 
  param = 'do_mgl')

# single parameter for a station, most recent
single_param('hudscwq', 'do_mgl')
@

The second approach for data retrieval is to use the \code{import\_local} function to import data into R that are locally available after downloading from CDMO.  This approach is most appropriate for large, specific data requests. The \code{import\_local} function is designed for data from the zip downloads feature in the advanced query section of the CDMO website. The zip downloads feature can be used to obtain data from multiple stations in one request.  The downloaded data will be in a compressed folder that includes multiple .csv files by year for a given data type (e.g., apacpwq2002.csv, apacpwq2003.csv, apacpnut2002.csv, etc.).  The \code{import\_local} function can be used to import files directly from the zipped folder or after the folder is decompressed.

Occasionally, non-unique observations are present in the raw data.  These duplicates may be actual replicates with unique time stamps, such as replicate samples for monthly nutrient data, or erroneous duplicates with non-unique time stamps.  The \code{import\_local} function handles duplicate entries differently depending on the data type.  For water quality and nutrient data, duplicate time stamps are simply removed.  Nutrient data often contain replicate samples with similar but not identical time stamps within the span of a few minutes.  Nutrient data with replicates with unique time stamps are not removed but can be further processed using \code{rem\_reps}.  Weather data prior to 2007 may also contain duplicate time stamps at frequencies for hourly (denoted as `60') and daily (`144') averages, in addition to 15 minute frequencies.  Only duplicate values at 15 minutes are averaged for weather data during import.  

<<eval = F>>=
# import local data for apaebmet

# this is an example path with the decompressed csv files
path <- 'C:/my_path'

# this is an example path for zipped csv files
path <- 'C:/my_path.zip'

# import, do not include file extension
import_local(path, 'apadbwq') 
@

\subsection{The \code{"swmpr"} object class}

All data retrieval functions return a \code{"swmpr"} object that includes relevant data and several attributes describing the dataset.  The data include a \code{datetimestamp} column in the appropriate timezone for a station and additional parameters for a given data type (weather, nutrients, or water quality).  Corresponding QAQC columns for each parameter are also returned if provided by the initial data request.  The following shows an example of the raw data imported using \code{all\_params}.

<<>>=
# import all paramaters for the station
# three most recent records
exdat <- all_params('apadbwq', Max = 3, trace = F)
exdat
@

The attributes for a \code{"swmpr"} object are descriptors that are appended to the raw data (Table~\ref{tab:attributes}).  These act as metadata that are used internally by many of the package functions and are updated as the data are processed. The attributes are not visible with the raw data but can be viewed as follows.

<<eval = F, cache = F>>=
# import sample data from package
data(apadbwq)
dat <- apadbwq

# view all attributes of dat
attributes(dat)
 
# view a single attribute of dat
attr(dat, 'station')
@
 
% attributes table
<<results = 'asis', echo = FALSE>>=
# create the attributes table
data(apadbwq)
dat <- apadbwq

# view all attributes of dat
atts <- paste0('\\code{', names(attributes(dat)), '}')
atts <- gsub('_', '\\_', atts, fixed = T)
atts_class <- c('character', 'integer', 'character', 'character', 'character', 'logical', 'POSIXct', 'character', 'character')
atts_desc <- c(
  'Column names of the entire data set, inherited from the \\code{data.frame} object class.',
  'Row names of the data set, inherited from the \\code{data.frame} object class.',
  'Class of the data object indicating \\code{"swmpr"} and \\code{data.frame}.',
  'Station identifier used by NERRS as a string with 7 or 8 characters.',
  "Character vector of column names for data parameters, e.g., \\code{`do\\_mgl'}, \\code{`turb'}, etc.",
  'Indicates if QAQC columns are present in the raw data.',
  'Start and end dates for the data.',
'Timezone of the station using the city/country format\\textsuperscript{a}.',
  'Class of the \\code{datetimestamp} column, usually POSIXct unless data have been aggregated.'
)

to_tab <- data.frame(Attributes = atts, Class = atts_class, Description = atts_desc, stringsAsFactors = F)
foot <- c('\\textsuperscript{a}\\footnotesize Time zones that do not observe daylight savings are used for \\code{"swmpr"} objects and may not be cities in the United States.  For example, ``America/Jamaica" is used for Eastern Standard Time.')

library(Hmisc)

latex(
  to_tab[, -1, drop = F],
  file = '',
  caption = 'Attributes of a \\code{"swmpr"} object that describe characteristics of the data.',
  rowlabel = 'Attributes',
  colheads = c('Class', 'Description'),
  rowname = to_tab$Attributes,
  caption.loc = 'top',
  insert.bottom = foot,
  col.just=c("p{0.75in}", "p{3.25in}"), 
  label = 'tab:attributes', 
  table.env = FALSE, 
  where = '!tbp'
  )
@

The \code{"swmpr"} object class was created for use with the organizing and analyzing functions.  This object-oriented approach is standard for R (i.e., the S3 object  system), such that specific methods for generic functions are developed for the object class.  A \code{"swmpr"} object also secondarily inherits methods from the \code{data.frame} class, such that common \code{data.frame} methods available in R also apply to \code{"swmpr"} objects.  Available methods for the \code{"swmpr"} class are described below and can also be viewed:
 
<<eval = F, cache = F>>=
# view available methods for swmpr class
methods(class = 'swmpr')
@

A sample dataset can be downloaded for use with the examples below.  This dataset has an identical format as the data returned from the zip downloads feature of the CDMO.  These data are also included with the package as binary data files (RData) that can be loaded using the \code{data} function, as shown above.  These include \code{"swmpr"} objects for four stations at Apalachicola Bay: apacpnut, apacpwq, apadbwq, and apaebmet.  Information for each file can be viewed in the help documentation (e.g., \code{?apacpnut}).

\subsection{Data organizing}

The organize functions are used to clean or prepare the imported data for analysis, including viewing and removal of QAQC flags, subsetting, combining replicate nutrient observations, creating a standardized time series, and combining data of different types (Table~\ref{tab:organize}).

The \code{qaqc} function is a simple screen to retain observations from the data with specified QAQC flags (see \url{http://cdmo.baruch.sc.edu/data/qaqc.cfm}). Each parameter in the imported \code{"swmpr"} object will have a corresponding QAQC column of the same name with the added prefix \code{f\_} (e.g., \code{do\_mgl}, \code{f\_do\_mgl}).  Values in the QAQC column range from -5 to 5 to indicate the QAQC flag that was assigned by CDMO during initial processing.  The \code{qaqc} function is used to remove observations in the raw data with given flags, with the default option to retain only values with the \code{0} QAQC flag (i.e., passed initial CDMO checks).     Additionally, simple filters are used to remove obviously bad values, e.g., wind speed values less than zero or pH values greater than 12. Erroneous data entered as -99 are also removed. The function returns the original data with the QAQC columns removed and \code{NA} (not available) values for observations that do not meet the criteria specified in the function call.

% table for organize functions
<<results = 'asis', echo = FALSE>>=

funcs <- c('comb', 'qaqc', 'qaqcchk', 'rem\\_reps', 'setstep', 'subset')
funcs <- paste0('\\code{', funcs, '}')

descrips <- c(
  'Combines \\code{"swmpr"} objects to a common time series using setstep, such as combining the weather, nutrients, and water quality data for a single station. Only different data types can be combined.',
  'Remove QAQC columns and remove data based on QAQC flag values for a \\code{"swmpr"} object.  Only applies if QAQC columns are present. ', 
  'View a summary of the number of observations in a \\code{"swmpr"} object that are assigned to each QAQC flag used by CDMO.  The output can be used to inform further processing.', 
  'Remove replicate nutrient data that occur on the same day.  The default is to average replicates.', 
  'Format data from a \\code{"swmpr"} object to a continuous time series at a given timestep.  The function is also used in \\code{comb}.',
  'Subset by dates and/or columns for a \\code{"swmpr"} object.  This is a method passed to the generic \\code{subset} function provided in the base installation.'
  )

to_tab <- data.frame(Functions = funcs, Description = descrips, stringsAsFactors = F)

library(Hmisc)

latex(
  to_tab[, 'Description', drop = F],
  file = '',
  caption = "Organizing functions available from the \\pkg{SWMPr} package. Full documentation for each function is in the help file (e.g., execute \\code{?comb} for individual functions or \\code{help.search(`organize', package = `SWMPr')} for all).",
  rowlabel = 'Function',
  colheads = 'Description',
  rowname = to_tab$Functions,
  caption.loc = 'top',
  col.just=c("p{3.5in}"), 
  label = 'tab:organize', 
  table.env = FALSE, 
  where = '!tbp'
  )
@

<<eval = F, cache = F>>=
# qaqc screen for a swmpr object, retain only '0'
qaqc(dat)

# retain all data regardless of flag
qaqc(dat, qaqc_keep = NULL)

# retain only '0' and '-1' flags
qaqc(dat, qaqc_keep = c(0, -1))
@

Viewing the number of observations for each parameter that are assigned to a QAQC flag may be useful for deciding how to process the data with \code{qaqc}.  The \code{qaqcchk} function can be used to view this information.

<<eval = F, cache = F>>=
# view the number of observations in each QAQC flag
qaqcchk(dat)
@

Raw nutrient data obtained from the CDMO will usually include replicate samples that were taken within a few minutes of each other.  The \code{rem\_reps} function combines nutrient data that occur on the same day to preserve an approximate monthly time step.  The \code{datetimestamp} column will always be averaged for replicates, but the actual observations will be combined based on the user-supplied function which defaults to the mean.  Other suggested functions include the \code{median}, \code{min}, or \code{max}.  The entire function call, including treatment of \code{NA} values, should be passed to the \code{FUN} argument (see the examples).  The function is meant to be used after \code{qaqc} processing, although it works with a warning if QAQC columns are present.

<<eval = F, cache = F>>=
# get nutrient data, filter qaqc flags
data(apacpnut)
dat <- apacpnut
dat <- qaqc(dat)

# remove replicate nutrient data
rem_reps(dat)

# use different function to aggregate replicates
func <- function(x) max(x, na.rm = T)
rem_reps(dat, FUN = func)
@

A subset method added to the existing generic \code{subset} function in R is available for \code{"swmpr"} objects.  This function is used to subset the data by date and/or a selected parameter.  The date can be a single value or as two dates to select records within the range. The former case requires a binary operator as a character string passed to the \code{operator} argument, such as \code{`>'} or \code{`<='}.  The subset argument for the date(s) must also be a character string of the format YYYY-mm-dd HH:MM for each element (e.g., `2007-01-01 06:30').  Be aware that an error may be returned using this function if the subset argument is in the correct format but the calendar date does not exist, e.g. \code{`2012-11-31 12:00'}.  Finally, the function can be used to remove rows and columns that do not contain data. 

<<eval = F, cache = F>>=
# import data
data(apaebmet)
dat <- apaebmet

# select two parameters from dat
subset(dat, select = c('rh', 'bp'))

# subset records greater than or equal to a date
subset(dat, subset = '2013-01-01 0:00', operator = '>=')

# subset records within a date range
subset(dat, subset = c('2012-07-01 6:00', '2012-08-01 18:15'))

# subset records within a date range, select two parameters
subset(dat, subset = c('2012-07-01 6:00', '2012-08-01 18:15'),
  select = c('atemp', 'totsorad'))

# remove rows/columns that do not contain data
subset(dat, rem_rows = T, rem_cols = T)
@

The \code{setstep} function formats a \code{"swmpr"} object to a continuous time series at a given time step.  This function is usually not necessary because most stations collect data at 15 minute intervals, but it can be used to combine data or convert an existing time series to a different interval.  The first argument of the function, \code{timestep}, specifies the desired time step in minutes starting from the nearest hour of the first observation.  The second argument, \code{differ}, specifies the allowable tolerance in minutes for matching existing observations to the defined time steps in cases where the two are dissimilar.  Values for \code{differ} that are greater than one half the value of \code{timestep} are not allowed to prevent duplication of existing data.  Likewise, the default value for \code{differ} is one half the time step.  Time steps that do not match any existing data within the limits of the \code{differ} argument are not discarded, although a corresponding data value will not be assigned.

<<eval = F, cache = F>>=
# import, qaqc removal
data(apadbwq)
dat <- qaqc(apadbwq)

# convert time series to two hour invervals
# tolerance of +/- 30 minutes for matching existing data
setstep(dat, timestep = 120, differ = 30)

# convert a nutrient time series to a continuous time series
# then remove empty rows and columns
data(apacpnut)
dat_nut <- apacpnut
dat_nut <- setstep(dat_nut, timestep = 60)
subset(dat_nut, rem_rows = T, rem_cols = T)
@

The \code{comb} function is used to combine multiple \code{"swmpr"} objects into a single object with a continuous time series at a given step.  The \code{setstep} function is used internally such that \code{timestep} and \code{differ} are accepted arguments for \code{comb}.  All arguments must be called explicitly since an arbitrary number of \code{"swmpr"} objects can be used as input to \code{comb}.  The function combines data by creating a master time series that is used to iteratively merge all \code{"swmpr"} objects.  The time series for merging depends on the value passed to the \code{method} argument.  Passing \code{`union'} to \code{method} will create a time series that is continuous from the earliest and latest dates for all input objects.  Passing \code{`intersect'} to \code{method} will create a continuous time series from the set of dates that are shared between all input objects.  Finally, a seven or eight character station name passed to \code{method} will merge all data based on a continuous time series for the specified station, which must be present in the input data.  Currently, combining identical data types from different stations is not possible (e.g., two water quality stations from the same reserve).  

<<eval = F, cache = F>>=
# get nut, wq, and met data as separate objects
data(apacpnut)
data(apacpwq)
data(apaebmet)
swmp1 <- apacpnut
swmp2 <- apacpwq
swmp3 <- apaebmet

# combine nut and wq data by union
comb(swmp1, swmp2, method = 'union')

# combine nut and wq data by intersect
comb(swmp1, swmp3, method = 'intersect')

# combine nut, wq, and met data by nut time series, two hour time step
comb(swmp1, swmp2, swmp3, timestep = 120, method = 'apacpnut')
@

\subsection{Data analysis}

The analysis functions range from general purpose tools for time series analysis to more specific functions for working with continuous monitoring data in estuaries (Table~\ref{tab:analyze}).  The general purpose tools are \code{"swmpr"} methods that were developed for existing generic functions in the R base installation or relevant packages (\pkg{SWMPr} imports and dependencies are listed on \href{http://cran.r-project.org/web/packages/SWMPr/index.html}{CRAN}). These functions include \code{"swmpr"} methods for \code{aggreswmp}, \code{filter}, and \code{approx} to deal with missing or noisy data and more general functions for exploratory data analysis, such as \code{plot}, \code{lines}, and \code{hist} methods.  Decomposition functions, \code{decomp} and \code{decomp\_cj}, are provided as relatively simple approaches for decomposing time series into additive or multiplicative components. Functions to estimate and plot ecosystem metabolism from combined water quality and weather data are provided by the \code{ecometab} and \code{plot\_metab} functions.  The analysis functions may or may not return a \code{"swmpr"} object depending on whether further processing with \code{"swmpr"} methods is possible from the output.    

The \code{aggreswmp} function aggregates parameter data for a \code{"swmpr"} object by set units of time.  This function is most useful for aggregating noisy data to evaluate trends on longer time scales or to simply reduce the size of a dataset.  Data can be aggregated by years, quarters, months, weeks, days, or hours by a user-defined function, which defaults to the mean.  A \code{"swmpr"} object is returned for the aggregated data, although the \code{datetimestamp} vector will be converted to a date object if the aggregation period is a day or longer.  Days are assigned to the date vector if the aggregation period is a week or longer based on the \code{round} method for IDate objects created in the \CRANpkg{data.table} package \citep{Dowle14}.  Additionally, the method of treating \code{NA} values for the aggregation function should be noted since this may greatly affect the quantity of data that are returned, particularly for nutrient data (see the example below).

% table for analysis functions
<<results = 'asis', echo = FALSE>>=

funcs <- c('aggreswmp', 'aggremetab', 'ecometab', 'decomp', 'decomp\\_cj', 'hist', 'lines', 'map\\_reserve', 'na.approx', 'plot', 'plot\\_metab', 'plot\\_summary', 'smoother')
funcs <- paste0('\\code{', funcs, '}')

descrips <- c(
  'Aggregate \\code{"swmpr"} objects for different time periods - years, quarters, months,  weeks, days, or hours.  The aggregation function defaults to the mean.',
  'Aggregate metabolism data from a \\code{"swmpr"} object.  This is primarly used within \\code{plot\\_metab} but may be useful for simple summaries of daily metabolism data.',
  'Estimate ecosystem metabolism for a combined water quality and weather dataset using the open-water method.',
  'Decompose a \\code{"swmpr"} time series into trend, seasonal, and residual components.  This is a simple wrapper to \\code{decompose} \\citep{Kendall83}.  Decomposition of monthly or daily trends is possible.',
  'Decompose a \\code{"swmpr"} time series into grandmean, annual, seasonal, and events components.  This is a simple wrapper to \\code{decompTs} in the \\CRANpkg{wq} package \\citep{Jassby14}.  Only monthly decomposition is possible.',
  'Plot a histogram for a \\code{"swmpr"} object.',
  'Add lines to an existing plot created with \\code{plot}.',
  'Create a map of all stations in a reserve using the \\CRANpkg{ggmap} package \\citep{Kahle13}.',
  'Linearly interpolate missing data (\\code{NA} values) in a \\code{"swmpr"} object. The maximum gap size that is interpolated is defined by the arguments.', 
  'Plot a univariate  time series for a \\code{"swmpr"} object.  The parameter name must be specified.',
  'Plot ecosystem metabolism estimates after running \\code{ecometab} on a combined \\code{"swmpr"} object.',  
  'Create summary plots of seasonal/annual trends and anomalies for a water a single paramter of interest.',
  'Smooth \\code{"swmpr"} objects with a moving window average.  Window size and sides (e.g., centered) can be specified, passed to \\code{filter}.'
  )

to_tab <- data.frame(Functions = funcs, Description = descrips, stringsAsFactors = F)

library(Hmisc)

latex(
  to_tab[, 'Description', drop = F],
  file = '',
  caption = "Analysis functions available from the \\pkg{SWMPr} package.  Full documentation for each function is in the help file (e.g., execute \\code{?aggreswmp} for individual functions or \\code{help.search(`analyze', package = `SWMPr')} for all).",
  rowlabel = 'Function',
  colheads = 'Description',
  rowname = to_tab$Functions,
  caption.loc = 'top',
  col.just=c("p{3.5in}"), 
  label = 'tab:analyze', 
  table.env = FALSE, 
  where = '!tbp'
  )
@

<<eval = T, cache = F>>=
# get data, keep all observations
data(apacpnut)
dat <- qaqc(apacpnut, qaqc_keep = NULL)

# aggregate by quarters
agg_dat <- aggreswmp(dat, by = 'quarters')
nrow(agg_dat)

# aggregate by quarters, remove rows with NA values
# note the reduction in the number of rows
agg_dat2 <- aggreswmp(dat, by = 'quarters', na.action = na.omit)
nrow(agg_dat2)
@

Time series can be smoothed to better characterize a signal from noisy data (Figure~\ref{fig:smooth_ex}).  Although there are many approaches to smoothing, a moving window average is intuitive and commonly used.  The \code{smoother} function can be used to smooth parameters in a \code{"swmpr"} object using a specified window size.  The \code{window} argument specifies the number of observations included in the moving average where larger windows result in greater smoothing.  The \code{sides} argument specifies how the average is calculated for each observation.  Setting \code{sides = 1} will filter observations within the window that are previous to the current observation, whereas \code{sides = 2} will filter observations within the window centered at zero lag from the current observation. As before, the \code{params} argument specifies which parameters to smooth.

<<smooth_ex, eval = T, fig.height = 3, cache = T, fig.cap = "Raw and smoothed dissolved oxygen data for a two-week period after using the \\code{smoother} function.">>=
# import data, qaqc and subset
data(apadbwq)
dat <- qaqc(apadbwq)
dat <- subset(dat, select = 'do_mgl', 
  subset = c('2012-07-09 00:00', '2012-07-24 00:00')
  )

# smooth using a window of 50 observations
dat_smooth <- smoother(dat, window = 50, params = 'do_mgl')

# plot raw and smoothed
plot(dat)
lines(dat_smooth, col = 'red', lwd = 2)
@

A common issue with any statistical analysis is the treatment of missing values.  Missing data can be excluded from the analysis, included but treated as true zeroes, or interpolated based on similar values.  In either case, an analyst should have a strong rationale for the chosen method.  A common approach implemented in the \pkg{SWMPr} package is linear interpolation using the \code{na.approx} function (Figure~\ref{fig:interp_ex}).  A simple curve fitting method is used to create a continuous set of records between observations separated by missing data.  However, the ability of the interpolated data to approximate actual trends is related to the maximum gap size between observations with missing data.  Interpolation between larger gaps are less likely to resemble patterns of an actual parameter, whereas interpolation between smaller gaps are often more accurate.  An upper limit on the maximum gap size to interpolate trends depends on the characteristics of the dataset such that a trial and error approach is appropriate for most applications.  The \code{maxgap} argument passed to \code{na.approx} defines the maximum gap size for interpolation and the following illustrates use of different maximum values to fill missing data.  

<<interp_ex, eval = T, fig.height = 6, cache = T, fig.scap = "Examples illustrating use of the \\code{na.approx} function to fill gaps of different sizes in a dissolved oxygen time series for a four day period.", fig.cap = "Examples illustrating use of the \\code{na.approx} function to fill gaps of different sizes in a dissolved oxygen time series for a four day period.">>=
# get data, qaqc and subset
data(apadbwq)
dat <- qaqc(apadbwq)
dat <- subset(dat, select = 'do_mgl', 
  subset = c('2013-01-22 00:00', '2013-01-26 00:00'))

# interpolate, maxgap of 10 records
fill1 <- na.approx(dat, params = 'do_mgl', maxgap = 10)

# interpolate maxgap of 30 records
fill2 <- na.approx(dat, params = 'do_mgl', maxgap = 30)

# plot for comparison
par(mfrow = c(3, 1))
plot(dat, main = 'Raw')
plot(fill1, col = 'red', main = 'Interpolation - maximum gap of 10 records')
lines(dat)
plot(fill2, col = 'red', main = 'Interpolation - maximum gap of 30 records')
lines(dat)
@

The disaggregation of time series into additive or multiplicative components that can be attributed to separate sources of variance is another common application for trend analysis.  The \code{decomp} function is a simple wrapper to \code{decompose} \citep{Kendall83} that separates a time series into components describing a trend, cyclical variation (e.g., daily or annual), and the remainder  (Figure~\ref{fig:decomp_ex1}).  An additive decomposition assumes that the cyclical component of the time series is stationary (i.e., the variance is constant), otherwise a multiplicative decomposition can be used.  The \code{frequency} argument describes the periodicity of the cyclical parameter in units of the native time step.  For example, the \code{frequency} for a parameter with daily periodicity would be 96 if the time step is 15 minutes (24 hours * 60 minutes / 15 minutes).  The frequency of a parameter with annual periodicity at a 15 minute time step would be 35040 (365 days * 24 hours * 60 minutes / 15 minutes).  For simplicity, character strings of \code{`daily'} or \code{`annual'} can be supplied in place of numeric values, although any number can be used to identify an arbitrary cyclical component.  A starting value of the time series must be supplied in the latter case that indicates the sequence in the cycle for the first observation.  For example, the starting value would be 1 if the first observation is at sunrise for a diurnal cycle (see the help file for the \href{https://stat.ethz.ch/R-manual/R-devel/library/stats/html/ts.html}{\code{ts}} function for details).  Use of the \code{setstep} function is also required to standardize the time step prior to decomposition.

<<decomp_ex1, eval = T, fig.height = 6, cache = T, fig.cap = "An additive decomposition of dissolved oxygen into a trend, seasonal (daily), and random component using the \\code{decomp} function.">>=
# get data
data(apadbwq)
dat <- apadbwq

# subset for daily decomposition
dat <- subset(dat, subset = c('2013-07-01 00:00', '2013-07-31 00:00'))

# daily decomposition of DO and plot
dc_dat <- decomp(dat, param = 'do_mgl', frequency = 'daily')
plot(dc_dat)
@

An alternative approach to time series decomposition is provided by the \code{decomp\_cj} function, which is a simple wrapper to the \code{decompTs} function in the \CRANpkg{wq} package \citep{Cloern10,Jassby14}.  The \code{decomp\_cj} function provides only a monthly decomposition, which is appropriate for characterizing relatively long-term trends.  This approach works best for nutrient data that are typically obtained on a monthly cycle.  The function will also work with continuous water quality or weather data but note that the data must first be aggregated on the monthly scale before decomposition.  The time series is decomposed into the grandmean, annual, seasonal, and events components, as compared to trend, seasonal, and random components for the \code{decomp} function described above.  For both, the random or events components can be considered anomalies that do not follow the trends in the remaining categories.  Additional arguments passed to \code{decompTs} can be used with \code{decomp\_cj}, such as \code{startyr}, \code{endyr}, and \code{type}.  Values passed to \code{type} are \code{mult} (default) or \code{add}, referring to multiplicative or additive decomposition.  Figure~\ref{fig:decomp_ex2} shows the results from the \code{decomp\_cj} function applied to a multi-year chlorophyll time series.

<<decomp_ex2, eval = T, fig.height = 6, warning = F, cache = T, fig.cap = "Additive decomposition of a multi-year chlorophyll time series into the grandmean, annual, seasonal, and events components using the \\code{decomp\\_cj} function.">>=
# get data
data(apacpnut)
dat <- apacpnut
dat <- qaqc(dat, qaqc_keep = NULL)

# decomposition of chl
decomp_cj(dat, param = 'chla_n')
@

Detailed exploratory graphics are also useful for evaluating general trends in observed data.  Several graphics showing seasonal and annual trends for a single SWMP parameter can be obtained using the \code{plot\_summary} function (Figure~\ref{fig:summary_ex}).  The plots include monthly distributions, monthly anomalies, and annual anomalies in multiple formats.  Anomalies are defined as the difference between the monthly or annual averages from the grand mean for the parameter.  An interactive Shiny web application \citep{Chang15} that uses this function is available for viewing results of any parameter at all SWMP sites (see the \nameref{swmp_apps} section).

<<summary_ex, fig.height = 7, fig.width = 13, message = F, cache = T, fig.cap = "Summaries of a multi-year chlorophyll time series using the \\code{plot\\_summary} function.  Summaries include monthly distributions (means on top left, quantiles on bottom left), monthly histograms (center), monthly means by year (top right), deviation from monthly means (middle right), and annual trends as deviations from the grand mean (bottom right)">>=
## import data
data(apacpnut)
dat <- qaqc(apacpnut)

## plot
plot_summary(dat, param = 'chla_n', years = c(2007, 2013))
@

Finally, estimates of ecosystem metabolism provide a measure of overall system productivity to evaluate whether an ecosystem is a net source or sink of organic material.  The open-water method \citep{Odum56} is a common approach to quantify metabolism using a mass balance equation that describes the change in dissolved oxygen over time from the balance between photosynthetic and respiration processes, corrected using an empirically constrained air-sea gas diffusion model \citep{Ro06,Thebault08}. The diffusion-corrected dissolved oxygen (DO) flux estimates are averaged separately over each day and night of the time series. The nighttime average DO flux is used to estimate respiration rates, while the daytime DO flux is used to estimate net primary production. To generate daily integrated rates, respiration rates are assumed constant such that hourly night time DO flux rates are multiplied by 24. Similarly, the daytime DO flux rates are multiplied by the number of daylight hours, which varies with location and time of year, to yield net daytime primary production. Respiration rates are subtracted from daily net production estimates to yield gross production rates. The metabolic day is considered the 24 hour period between sunsets on two adjacent calendar days  

The \code{ecometab} function is used to implement the open-water method with a combined water quality and weather dataset \citep{Caffrey14}.  Several assumptions must be met for a valid interpretation of the results.  First, the DO time series is assumed to be a sample of the same water mass over time.  Tidal advection may have a significant influence on the time series, which can contribute to a substantial amount of noise in metabolic estimates.  The extent to which tidal advection influences the dissolved oxygen signal depends on various site-level characteristics and an intimate knowledge of the site may be required.  Second, areal rates for gross production and total respiration are based on volumetric rates normalized to the depth of the water column at the sampling location, which is assumed to be well-mixed, such that the water quality sensor is reflecting the integrated processes in the entire water column (including the benthos).  Water column depth is calculated as the mean value of the depth variable across the time series in the \code{"swmpr"} object. Depth values are floored at one meter for very shallow stations and 0.5 meters is also added to reflect the practice of placing sensors slightly off of the bottom.  Third, the air-sea gas exchange model is calibrated with wind data either collected at, or adjusted to, wind speed at 10 m above the surface.  The metadata should be consulted for exact height. Other assumptions may apply and relevant resources should be consulted to ensure appropriate application of the open-water method (see \citet{Kemp12,Needoba12}).

The following is an example that shows use of the \code{ecometab} function from a combined water quality and weather data set.  Monthly aggregations of the raw, daily estimates are plotted using \code{plot\_metab} (Figure~\ref{fig:metab_ex}).

<<metab_ex, eval = TRUE, cache = T, fig.height = 4, fig.width = 8, warning = FALSE, fig.cap = "Monthly means (95\\% confidence) of ecosystem metabolism estimates (net ecosystem metabolism, gross production, and total respiration) for combined water quality and weather data for two years at Apalachicola Bay, Florida.">>=
## import water quality and weather data
data(apadbwq)
data(apaebmet)

## qaqc, combine
wq <- qaqc(apadbwq)
met <- qaqc(apaebmet)
dat <- comb(wq, met)

## estimate metabolism
res <- ecometab(dat, trace = FALSE)
plot_metab(res)
@

Finally, the \code{map\_reserve} function can be used to create a map with all stations at a reserve using functions in the \CRANpkg{ggmap} package \citep{Kahle13}. This map may be useful for aiding the interpretation of spatial trends in water quality parameters given the relative locations in a reserve.  The current function is limited to Google maps of four types that can be set with the \code{map\_type} argument: terrain (default), satellite, roadmap, or hybrid.  The \code{zoom} argument can be chosen through trial and error depending on the spatial extent of the reserve.  See the help documentation for the \code{ggmap} function for more info on \code{zoom}.

<<map_ex, fig.height = 5, message = F, cache = T, fig.cap = "Locations of all sites at the Jacques Cousteau reserve using the \\code{map\\_reserve} function.">>=
# plot the stations at Jacques Cousteau reserve
map_reserve('jac')
@

\subsection{Miscellaneous functions}

Several additional functions are provided that do not fit the above categories (Table~\ref{tab:misc}).  These functions are generally used within the main functions but may be useful for more customized evaluation of SWMP data.  

% table for misc functions
<<results = 'asis', echo = FALSE>>=

funcs <- c('calckl', 'metab\\_day', 'param\\_names', 'parser', 'swmpr', 'time\\_vec')
funcs <- paste0('\\code{', funcs, '}')

descrips <- c(
  'Estimate the reaeration coefficient for air-sea gas exchange.  Used in the \\code{ecometab} function.',
  'Identify the metabolic day for each approximate 24 period in an hourly time series.  Used in the \\code{ecometab} function.',
  'Returns column names as a list for the parameter types (nutrients, weather, or water quality).  Includes QAQC columns with \\code{f\\_} prefix. Used in the data retrieval functions.',
  'Parses HTML returned from CDMO data requests.  Used in the retrieval functions.',
  'Creates a \\code{"swmpr"} object class.  Used in the data retrieval functions.',
  'Converts time vectors to \\code{POSIXct} objects with the appropriate time zone for a site.  Used in the data retrieval functions.'
  )

to_tab <- data.frame(Functions = funcs, Description = descrips, stringsAsFactors = F)

library(Hmisc)

latex(
  to_tab[, 'Description', drop = F],
  file = '',
  caption = "Miscellaneous functions available from the \\pkg{SWMPr} package.  Most are used within the main functions above but may be useful for customized evaluations of SWMP data.  Full documentation for each function is in the help file (e.g., execute \\code{?calckl} at the command line).",
  rowlabel = 'Function',
  colheads = 'Description',
  rowname = to_tab$Functions,
  caption.loc = 'top',
  col.just=c("p{3.5in}"), 
  label = 'tab:misc', 
  table.env = FALSE, 
  where = '!tbp'
  )

@

\section{Applications using the \pkg{SWMPr} package}
\label{swmp_apps}

This section describes three examples using the \pkg{SWMPr} package to illustrate the improved ability to synthesize and evaluate multi-year time series of estuarine data. First, the open-water method for estimating metabolism was applied to nearly all co-located water quality and weather sites at each NERRS reserve using all years of available data.  The results are provided primarily to illustrate ease of use of the functions and secondarily to provide an update on metabolism estimates using the most recent SWMP data.  \citet{Caffrey03} and \citet{Caffrey04} applied the open-water method to estimate ecosystem metabolism using five years of water quality observations at two sites at each of the NERRS reserves.  The air-sea gas exchange model also assumed a constant value for the reaeration coefficient, whereas the current \code{ecometab} function provides a more accurate estimate by including weather data in the calculation (see \citet{Caffrey14} for details).

Water quality and weather observations from January 1995 to December 2014 for all NERRS sites were obtained through a bulk data request using the zip downloads feature of CDMO.  All csv files for each station were imported into R using the \code{import\_local} function, processed using the \code{setstep} and \code{qaqc} functions, then saved locally as binary RData files. This resulted in a single \code{"swmpr"} object for each parameter at each site.  All files were then uploaded to a remote server for online access.  An additional R script was executed that retrieved and processed water quality and weather data at each reserve to estimate metabolism.  Two water quality sites with the longest time series at each reserve were used.  Mean annual metabolism values at each site, organized by region, are shown in Figure~\ref{fig:metab_plo}, whereas decadal comparisons are shown in Table~\ref{tab:metab_tab}.  All sites were generally net heterotrophic across the range of observations (i.e., sink of organic matter, in agreement with \citet{Caffrey03}), although differences were observed in early (i.e., 1995-2004) as compared to recent (2005-2014) time periods. Overall, the results indicate that between-region and within-site differences in metabolism are apparent and varying by time period, such that a more comprehensive evaluation of factors that influence metabolic rates is needed.  More importantly, use of the data retrieval, synthesis, and analysis functions to create the results illustrates the utility provided by the \pkg{SWMPr} package.

% metabolism figure
<<metab_plo, eval = T, cache = T, echo = F, fig.cap = 'Aggregated estimates of net metabolism, gross production, and total respiration for two sites at each NERRS reserve.  Values are daily integrated estimates as mean annual values averaged across all years with 95\\% confidence intervals.  Two sites were chosen from each reserve that had the longest available time series. Sites were assigned to regions based on approximate geographic coordinates.', fig.height = 6, fig.width = 8>>=
# # packages to use
# library(SWMPr)
# library(httr)
# library(XML)
# library(foreach)
# library(doParallel)
# 
# # names of files on server
# files_s3 <- httr::GET('https://s3.amazonaws.com/swmpalldata/')$content
# files_s3 <- rawToChar(files_s3)
# files_s3 <- htmlTreeParse(files_s3, useInternalNodes = T)
# files_s3 <- xpathSApply(files_s3, '//contents//key', xmlValue)
# files_s3 <- gsub('\\.RData$', '', files_s3) 
# 
# # find only active water quality and weather sites
# # IP address must be registed with CDMO 
# meta <- site_codes()
# sel <- meta$status %in% 'Active' & !grepl('nut$', meta$station_code)
# meta <- meta[sel, ]
# 
# # get wq sites from meta, then filter by those on server
# wq_sites <- grep('wq$', meta$station_code, value = T)
# wq_sites <- files_s3[gsub('\\.RData$', '', files_s3) %in% wq_sites]
# 
# # setup parallel backend for processing
# cl <- makeCluster(8)
# registerDoParallel(cl)
# strt <- Sys.time()
# 
# # process
# metabs <- foreach(wq_site = wq_sites) %dopar% {
#  
#   library(SWMPr)
#   
#   # progress
#   sink('log.txt')
#   cat(wq_site, which(wq_site == wq_sites), 'of', length(wq_sites), '\n')
#   print(Sys.time() - strt)
#   sink()
#   
#   # find corresponding wx station
#   met_site <- substr(wq_site, 1, 3)
#   met_site <- grep(paste0('^', met_site, '.*met'), files_s3, value = T)
#   met_site <- gsub('\\.RData$', '', met_site)
# 
#   # continue if wx data found
#   if(length(met_site) > 0){
#     
#     # if > 1 wx site, pick the one with more obs
#     if(length(met_site) > 1){
# 
#       met_list <- vector('list', length(met_site))
#       names(met_list) <- met_site
#       for(met in met_site){
#       
#         met_tmp <- import_remote(met)
#         met_list[[met]] <- met_tmp
#       
#       }
#     
#       # pick the one with most obs
#       met_most <- which.max(unlist(lapply(met_list, nrow)))
#       met <- met_list[met_most][[1]]
# 
#     # otherwise load only one
#     } else {
#     
#       # met
#       met <- import_remote(met_site)
#     
#     }
#     
#     ##
#     # load the wq file
#     
#     # wq
#     wq <- import_remote(wq_site)
#     
#     ## 
#     # combine, estimate metabolism, reduce data volume
#     dat <- comb(wq, met, method = attr(met, 'station'))
#     dat <- ecometab(dat)
#     dat <- dat[1, ]
#     
#     dat
#     
#   }
#   
# }
# names(metabs) <- wq_sites
# save(metabs, file = 'metabs.RData')

# # take all metab estimates and summarize by year
# # done for two stations at each reserve with the longest time series
# data(metabs)
# 
# metabs <- lapply(metabs, attr, 'metabolism')
# metabs <- do.call('rbind', metabs)
# metabs$site <- gsub('\\.[0-9]*$', '', as.character(row.names(metabs)))
# row.names(metabs) <- 1:nrow(metabs)
# 
# library(dplyr)
# library(tidyr)
# metabs <- select(metabs, date, Pg, Rt, NEM, site) %>% 
#   mutate(date = as.numeric(strftime(date, '%Y'))) %>% 
#   gather('metab', 'value', 2:4) %>% 
#   group_by(date, site, metab) %>% 
#   summarize(value = mean(value, na.rm = T)) %>% 
#   group_by(site, metab) %>% 
#   na.omit %>% 
#   mutate(reserve = substr(site, 1, 3)) %>% 
#   spread(metab, value)
# 
# # select two sites from each reserve, those with longest records
# metabs <- split(metabs, metabs$reserve)
# metabs <- lapply(metabs, 
#   function(x){
#     
#     num_yrs <- aggregate(date ~ site, x, length)
#     num_yrs <- num_yrs[order(num_yrs$date, decreasing = T), ]
#     
#     if(nrow(num_yrs) >1){
#       site_sel <- num_yrs$site[c(1, 2)]
#     } else {
#       site_sel <- num_yrs$site[1]
#     }
#     
#     out <- x[x$site %in% site_sel, ]
#     return(out)
#     
#   }
#   
# )
# metabs <- do.call('rbind', metabs)
# 
# metabs_sum <- metabs
# save(metabs_sum, file = 'data/metabs_sum.RData')

data(metabs_sum)

library(dplyr)
library(tidyr)

# summarize for annual means, get conf ints
metabs_plo <- gather(metabs_sum, 'metab', 'value', 4:6) %>% 
  group_by(site, metab) %>% 
  summarize(
    margs = qt(1 - 0.05/2, length(value) - 1) * sd(value)/sqrt(length(value)),
    value = mean(value)
    ) %>% 
  mutate(
    value = 0.032 * value,
    margs = 0.032 * margs,
    upper = value + margs, 
    lower = value - margs
    )

# get region
data(stat_locs)
names(stat_locs)[names(stat_locs) %in% 'station_code'] <- 'site'
metabs_plo$site <- gsub('wq$', '', metabs_plo$site)
metabs_plo <- left_join(metabs_plo, stat_locs, by = 'site')
region <- rep('Pacific', nrow(metabs_plo))
region[metabs_plo$longitude > -110] <- 'Gulf'
region[metabs_plo$latitude > 28 & metabs_plo$longitude > -84] <- 'Atlantic'

# combine, select, sort
metabs_plo <- select(metabs_plo, -c(latitude, longitude, gmt_off))
metabs_plo$region <- region
metabs_plo <- arrange(metabs_plo, region, site)

# plot prep
to_plo <- data.frame(metabs_plo)

#reassign factors for ranking in plot
sort_val <- to_plo[to_plo$metab == 'Pg', c('region', 'value', 'site')]
sort_val <- order(sort_val$region, sort_val$value)
to_plo$site <- factor(to_plo$site)
to_plo$site <- factor(
  to_plo$site,
  levels = levels(to_plo$site)[sort_val],
  labels = levels(to_plo$site)[sort_val]
  )
new_labs <- c('Mean net metabolism', 'Mean gross production', 'Mean total respiration')
to_plo$metab <- factor(to_plo$metab, levels = c('NEM', 'Pg', 'Rt'), labels = new_labs)

ylabs <- expression(paste('g ', O[2],' ', m^-2,' ', d^-1))
library(ggplot2)
p <- ggplot(to_plo, 
    aes(x = site, y = value, group = metab, fill = metab)
  ) + 
  geom_bar(stat = 'identity', width = 1, colour = 'black') + 
  scale_y_continuous(ylabs) + 
  facet_grid(metab ~ region, scales = 'free') + 
  scale_x_discrete(name = element_blank()) + 
  theme_bw() + 
  theme(
    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, 
      size = 7),
    legend.position = 'none'
    ) +
  geom_errorbar(aes(ymin = lower, ymax = upper), width = 0)
print(p)

@

% table summary of trends
<<eval = T, results = 'asis', cache = T, echo = F>>=

data(metabs_sum)

library(dplyr)
library(tidyr)

# summarize by time periods
metabs_tab <- gather(metabs_sum, 'metab', 'value', 4:6)
metabs_tab$yr_grp <- '1995-2004'
metabs_tab$yr_grp[metabs_tab$date > 2004] <- '2005-2014'
metabs_tab <- mutate(metabs_tab, value = 0.032 * value) %>% 
  group_by(site, metab, yr_grp) %>% 
  arrange(yr_grp, date, metab) %>% 
  summarize(ave = round(mean(value, na.rm = TRUE), 2)) %>% 
  spread(yr_grp, ave) 
trends <- apply(metabs_tab, 1, function(x){
  
  val <- as.numeric(x[['2005-2014']])
  trnd <- val > as.numeric(x[['1995-2004']])
  
  if(is.na(trnd)) return(val)
  if(trnd) return(paste0('{\\bf ', val, '}'))
  if(!trnd) return(paste0('{\\it ', val, '}'))
  
})
metabs_tab[, '2005-2014'] <- trends
metabs_tab <- gather(metabs_tab, 'period', 'value', 3:4) %>% 
  unite('var', metab, period, sep = ' ') %>% 
  spread(var, value) %>% 
  mutate(site = gsub('wq$', '', site))

# get region
data(stat_locs)
names(stat_locs)[names(stat_locs) %in% 'station_code'] <- 'site'
metabs_tab <- left_join(metabs_tab, stat_locs, by = 'site')
region <- rep('Pacific', nrow(metabs_tab))
region[metabs_tab$longitude > -110] <- 'Gulf'
region[metabs_tab$latitude > 28 & metabs_tab$longitude > -84] <- 'Atlantic'

# combine, select, sort
metabs_tab <- select(metabs_tab, -c(latitude, longitude, gmt_off)) %>% 
  mutate(region = region) %>% 
  arrange(region, site)

nrgroups <- as.numeric(table(metabs_tab$region))
# table

cap <- 'Trends in metabolism for two sites at each of the NERRS reserves.  Values are averages of mean annual estimates for each period of observation (1994-2004 and 2005-2014). Bold values indicate an increase from the first period, whereas italic values indicate a decrease. Sites were assigned to regions based on approximate geographic coordinates.' 
foots <- '\\footnotesize{\\textsuperscript{a}NEM: net ecosystem metabolism, Pg: gross production, Rt: total respiration, all values in g O$_2$ m$^{-2}$ d$^{-1}$ as annual averages.}' 

library(Hmisc)
latex(
  metabs_tab[, !names(metabs_tab) %in% c('site', 'region')], 
  file = '', 
  caption = cap, 
  cgroup = c('NEM\\textsuperscript{a}', 'Pg', 'Rt'), 
  n.cgroup = c(2, 2, 2), 
  colheads = rep(c('1995-2004', '2005-2014'), 3),
  rowlabel = 'Site', 
  rowname = metabs_tab$site,
  digits = 2,
  insert.bottom = foots,
  rgroup = unique(metabs_tab$region),
  n.rgroup = nrgroups,
  label = 'tab:metab_tab',
  size = 'footnotesize', 
  where = '!tbp'
  )
  
@

The second and third examples are two interactive web applications \citep{Chang15} created using the \pkg{SWMPr} package that illustrate summaries and comparisons of SWMP data.  The first web application evaluates trends in SWMP data within and between sites using an interactive map (Figure~\ref{fig:swmp_comp}): \href{https://beckmw.shinyapps.io/swmp_comp}{https://beckmw.shinyapps.io/swmp\_comp}.  Trends between reserves can be viewed using the map, whereas trends at individual sites can be viewed by clicking on a map location.  Site-level trends are shown below the map with a simple linear regression to show an increase or decrease in values over time.  Trends on the map at each station are plotted as circles that identify the direction and significance of the trend, such that larger points with darker colors indicate a strong trend.  The trend over time is blue for decreasing and red for increasing.  The second application provides graphical summaries of water quality, weather, or nutrient station data at individual stations using the \code{plot\_summary} function: \href{https://beckmw.shinyapps.io/swmp_summary/}{https://beckmw.shinyapps.io/swmp\_summary}.  The output is identical to Figure~\ref{fig:summary_ex} with the addition of drop down menus to select the station, date range, and parameter for plotting. Both of the apps provide previously unavailable utilities to interact with SWMP data using an intuitive online interface.  This format may be more appealing for individuals with limited experience using R, while simultaneously illustrating what is possible using functions from the package. The applications have been used extensively with over 300 hours noted in a single month.   

\begin{figure}
\begin{center}
\includegraphics[width = 0.8\textwidth]{figure/swmp_comp.pdf}
\caption{Online application for comparing trends in SWMP data parameters using an interactive map.  Link: \href{https://beckmw.shinyapps.io/swmp_comp}{https://beckmw.shinyapps.io/swmp\_comp}}
\label{fig:swmp_comp}
\end{center}
\end{figure}

\section{Conclusions}

The ability of management and research programs to address critical environmental issues is highly dependent on the quality of data used to inform decision making.  Standardized monitoring programs have vastly improved the ability to evaluate factors that influence a range of conditions, leading to more comprehensive assessments of site-specific characteristics and more informed decisions to manage environmental resources.  The System-Wide Monitoring Program has provided twenty years of continuous monitoring of environmental characteristics at over over 140 stations within the 28 estuaries of the National Estuarine Research Reserve System.  This monitoring network establishes a foundation  for more effective coastal management by providing standardized data to address spatiotemporal variation in natural and anthropogenic characteristics that influence environmental condition.  Although the data provided by SWMP are unique among coastal observing systems and have been used in a variety of applications \citep{Bulthius95,Caffrey03,Sanger02,Wenner04,Dix08}, the capacity of NERRS researchers and staff to more effectively evaluate SWMP data could be greatly improved using the \pkg{SWMPr} package.

The \pkg{SWMPr} package provides several functions to retrieve, organize, and analyze SWMP data to more effectively address common challenges working with large datasets.  The package is designed to augment, rather than replace, existing data retrieval programs by providing a bridge betwen the raw data and the analysis software through its numerous data retrieval functions (Table~\ref{tab:retrieve}).  Established QAQC methods and data processing techniques are also enhanced with \pkg{SWMPr} by functions that filter observations for different QAQC flags (\code{qaqc}) and subset by selected dates or variables (\code{subset}).  Additionally, cumbersome challenges comparing differents datasets are addressed by the \code{setstep} and \code{comb} functions that standardize and combine time series.  Finally, the analysis functions provide numerous tools to implement common analyses for time series and more specific methods for water quality data.  In particular, the \code{ecometab} function can be used to estimate daily integrated rates of ecosystem metabolism using the open-water method \citep{Odum56,Caffrey14}.  The above analysis (see \nameref{swmp_apps}) provided a cursory update of metabolism estimates for each the NERRS estuaries using recent data to evaluate trends over time.  Although further evaluation of the data are needed, particularly regarding assumptions of the open-water method and tidal effects, the results could be used in a more comprehensive evaluation of factors that influence estuary metabolism. Further development of the \pkg{SWMPr} package will consider modifying existing and including additional functions to more effectively integrate data analysis with the quality of information provided by CDMO, SWMP, and NERRS. 

\section{Acknowledgments}

I acknowledge the significant work of NERRS researchers and staff that has allowed access to high-quality monitoring data.  Thanks to Todd O'Brien for the inspiration for the online widgets. Thanks to Mike Murrell and Jim Hagy III for assistance with the ecosystem metabolism functions. Thanks to Jeffrey Hollister for providing useful comments on an earlier draft.  The views expressed in this article are those of the author and do not necessarily reflect the views or policies of the U.S. Environmental Protection Agency.  The use of trade names or products does not constitute endorsement by the US Government.   

\bibliography{beck}

\address{Marcus W Beck\\
  ORISE Research Participation Program\\
  USEPA National Health and Environmental Effects Research Laboratory, Gulf Ecology Division\\
  1 Sabine Island Drive, Gulf Breeze, FL 32651\\
  USA\\}
\email{beck.marcus@epa.gov}

\end{article}

\end{document}
